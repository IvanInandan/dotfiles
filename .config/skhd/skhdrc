# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# focus window
alt - j : yabai -m window --focus west
alt - k : yabai -m window --focus south
alt - i : yabai -m window --focus north
alt - l : yabai -m window --focus east

# swap managed window
alt + shift - j : yabai -m window --swap west
alt + shift - k : yabai -m window --swap south
alt + shift - i : yabai -m window --swap north
alt + shift - l : yabai -m window --swap east

# move managed window and split
#cmd + shift - j : yabai -m window --warp west
#cmd + shift - k : yabai -m window --warp south
#cmd + shift - i : yabai -m window --warp north
#cmd + shift - l : yabai -m window --warp east

# toggle window split type
alt - e : yabai -m window --toggle split

# rotate layout clockwise
alt + shift - r : yabai -m space --rotate 270

# flip layout
alt + shift - x : yabai -m space --mirror x-axis
alt + shift - z : yabai -m space --mirror y-axis

# toggle window zoom
alt + shift - q : yabai -m window --toggle zoom-parent
alt + shift - e : yabai -m window --toggle zoom-fullscreen

# increase window size
alt + shift - a : yabai -m window --resize left:-48:0
alt + shift - d : yabai -m window --resize right:48:0
alt + shift - w : yabai -m window --resize top:0:-48
alt + shift - s : yabai -m window --resize bottom:0:48

# balance size of windows
alt + shift - return : yabai -m space --balance

# -----------------------------------------------------------------------------

# toggle sticky(+float), topmost, picture-in-picture
alt - z : yabai -m window --toggle sticky --toggle topmost --toggle pip

# float / unfloat window and center on screen
alt + shift - f : yabai -m window --toggle float --grid 8:8:1:1:6:6

# make floating window fill screen
alt + shift - up     : yabai -m window --grid 1:1:0:0:1:1
alt + shift - down   : yabai -m window --grid 8:8:1:1:6:6
alt + shift - left   : yabai -m window --grid 1:2:0:0:1:1
alt + shift - right  : yabai -m window --grid 1:2:1:0:1:1

# -----------------------------------------------------------------------------

# decrease window size
#cmd + shift - a : yabai -m window --resize left:48:0
#cmd + shift - d : yabai -m window --resize right:-48:0
#cmd + shift - w : yabai -m window --resize top:0:48
#cmd + shift - s : yabai -m window --resize bottom:0:-48

# move floating window
#ctrl + shift - a : yabai -m window --move rel:-12:0
#ctrl + shift - d : yabai -m window --move rel:12:0
#ctrl + shift - w : yabai -m window --move rel:0:-12
#ctrl + shift - s : yabai -m window --move rel:0:12

# fast focus desktop
# cmd + alt - x : yabai -m space --focus recent
# cmd + alt - 1 : yabai -m space --focus 1

# -----------------------------------------------------------------------------

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
alt + shift - n : yabai -m space --create && \
    index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
    yabai -m window --space "${index}" && \
    yabai -m space --focus "${index}"

# send window to desktop and follow focus
alt + shift - o : yabai -m window --space prev ;yabai -m space --focus prev
alt + shift - p : yabai -m window --space next ;yabai -m space --focus next
alt + shift - 1 : yabai -m window --space 1; yabai -m space --focus 1
alt + shift - 2 : yabai -m window --space 2; yabai -m space --focus 2
alt + shift - 3 : yabai -m window --space 3; yabai -m space --focus 3
alt + shift - 4 : yabai -m window --space 4; yabai -m space --focus 4
alt + shift - 5 : yabai -m window --space 5; yabai -m space --focus 5
alt + shift - 6 : yabai -m window --space 6; yabai -m space --focus 6
alt + shift - 7 : yabai -m window --space 7; yabai -m space --focus 7
alt + shift - 8 : yabai -m window --space 8; yabai -m space --focus 8
alt + shift - 9 : yabai -m window --space 9; yabai -m space --focus 9
alt + shift - 0 : yabai -m window --space 10; yabai -m space --focus 10

# switch spaces
alt - o : yabai -m space --focus prev
alt - p : yabai -m space --focus next
alt - 1 : yabai -m space --focus 1
alt - 2 : yabai -m space --focus 2
alt - 3 : yabai -m space --focus 3
alt - 4 : yabai -m space --focus 4
alt - 5 : yabai -m space --focus 5
alt - 6 : yabai -m space --focus 6
alt - 7 : yabai -m space --focus 7
alt - 8 : yabai -m space --focus 8
alt - 9 : yabai -m space --focus 9
alt - 0 : yabai -m space --focus 10

# -----------------------------------------------------------------------------

# focus monitor
# ctrl + alt - z  : yabai -m display --focus prev
# ctrl + alt - 3  : yabai -m display --focus 3

# send window to monitor and follow focus
# ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
# ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west
# Macros for opening applications

# -----------------------------------------------------------------------------

alt - b : open -na "Google Chrome"
alt - m : open -na "Spotify"
alt - return : osascript -e 'tell application "iTerm2" to create window with default profile command ""' || open -na iTerm